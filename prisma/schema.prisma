generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ───────────────────────────────
// 🧑‍💼 Autenticación y Usuarios
// ───────────────────────────────

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          Role      @default(USER)
  isAuthorized  Boolean   @default(false)
  image         String?

  accounts     Account[]
  sessions     Session[]
  transactions InventoryTransaction[]
  groups       InventoryTransactionGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  AUDITOR
}

// ───────────────────────────────
// 💎 Inventario de piedras preciosas
// ───────────────────────────────

model InventoryType {
  id    String          @id @default(cuid())
  name  String          @unique
  items InventoryItem[]
}

model InventoryUnit {
  id        String          @id @default(cuid())
  name      String          @unique
  valueType ValueType       @default(DECIMAL)
  items     InventoryItem[]
}

enum ValueType {
  INTEGER
  DECIMAL
}

model InventoryItem {
  id        String        @id @default(cuid())
  name      String
  typeId    String
  unitId    String
  type      InventoryType @relation(fields: [typeId], references: [id])
  unit      InventoryUnit @relation(fields: [unitId], references: [id])
  quantity  Float         @default(0)
  price     Float         @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  transactions InventoryTransaction[]

  @@unique([name, typeId, unitId])
}

model InventoryTransaction {
  id        String                     @id @default(cuid())
  itemId    String
  item      InventoryItem              @relation(fields: [itemId], references: [id], onDelete: Cascade)
  type      TransactionType
  amount    Float
  price     Float                      @default(0) // solo en ventas
  groupId   String?
  group     InventoryTransactionGroup? @relation(fields: [groupId], references: [id])
  userId    String?
  User      User?                      @relation(fields: [userId], references: [id])
  createdAt DateTime                   @default(now())
}

model InventoryTransactionGroup {
  id           String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  userId       String?
  user         User?                  @relation(fields: [userId], references: [id])
  transactions InventoryTransaction[]
}

enum TransactionType {
  CARGA_INDIVIDUAL
  CARGA_GRUPAL
  VENTA_INDIVIDUAL
  VENTA_GRUPAL
  EDICION_PRODUCTO
}
